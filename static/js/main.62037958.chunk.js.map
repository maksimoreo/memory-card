{"version":3,"sources":["components/Card.js","components/Game.js","App.js","index.js"],"names":["Card","props","squareRows","elements","rowSize","Math","sqrt","length","rowsNumber","result","i","push","slice","distributeToRows","number","maxNumber","binDigits","toString","padStart","split","decodeNumber","id","maxId","map","code","index","className","squares","onClick","generateIds","numberOfCards","pow","ceil","log2","_","shuffle","range","Game","useState","score","setScore","highscore","setHighscore","cards","setCards","clickedCards","setClickedCards","restart","handleCardClick","includes","max","concat","cardID","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kSAmBe,SAASA,EAAKC,GACzB,IASMC,EAtBV,SAA0BC,GAKtB,IAJA,IAAMC,EAAUC,KAAKC,KAAKH,EAASI,QAC7BC,EAAaL,EAASI,OAASH,EAC/BK,EAAS,GAENC,EAAI,EAAGA,EAAIF,EAAYE,IAC5BD,EAAOE,KAAKR,EAASS,MAAMF,EAAIF,GAAaE,EAAI,GAAKF,IAGzD,OAAOC,EAaYI,CA3BvB,SAAsBC,EAAQC,GAC1B,IAAMC,EAAYD,EAAUE,SAAS,GAAGV,OACxC,OAAOO,EAAOG,SAAS,GAAGC,SAASF,EAAW,KAAKG,MAAM,IAkBlCC,CAAanB,EAAMoB,GAAIpB,EAAMqB,OAAOC,KAAI,SAACC,EAAMC,GAAP,OAC3D,qBAEIC,UAAW,qBAAgC,MAATF,EAAe,0BAA4B,KADxEC,OAKuCF,KAAI,SAACI,EAASF,GAAV,OACpD,qBAAiBC,UAAU,kBAA3B,SACKC,GADKF,MAKd,OACI,qBAAKC,UAAU,iBAAf,SACI,wBAAQA,UAAU,OAAOE,QAjBb,kBAAM3B,EAAM2B,QAAQ3B,EAAMoB,KAiBtC,SACI,qBAAKK,UAAU,UAAf,SAA0BxB,Q,MCjC1C,SAAS2B,EAAYC,GACjB,IAAMR,EAAQjB,KAAK0B,IAAI,EAAG1B,KAAK2B,KAAK3B,KAAK4B,KAAKH,KAC9C,OAAOI,IAAEC,QAAQD,IAAEE,MAAM,EAAGd,IAAQV,MAAM,EAAGkB,GAGlC,SAASO,EAAKpC,GAAQ,IAAD,EACNqC,mBAAS,GADH,mBACzBC,EADyB,KAClBC,EADkB,OAEEF,mBAAS,GAFX,mBAEzBG,EAFyB,KAEdC,EAFc,OAGNJ,mBAAST,EAAY5B,EAAM6B,gBAHrB,mBAGzBa,EAHyB,KAGlBC,EAHkB,OAIQN,mBAAS,IAJjB,mBAIzBO,EAJyB,KAIXC,EAJW,KAM1BC,EAAU,WACZP,EAAS,GACTI,EAASf,EAAY5B,EAAM6B,iBAGzBkB,EAAkB,SAAC3B,GACjBwB,EAAaI,SAAS5B,IACtBqB,EAAarC,KAAK6C,IAAIX,EAAOE,IAC7BD,EAAS,GACTM,EAAgB,IAGhBC,MAEAD,EAAgBD,EAAaM,OAAO9B,IACpCmB,EAASD,EAAQ,GAEbM,EAAatC,SAAWoC,EAAMpC,QAE9BwC,KAIRH,EAASV,IAAEC,QAAQQ,KAGvB,OACI,gCACI,oBAAGjB,UAAU,aAAb,oBAAkCa,KAClC,oBAAGb,UAAU,iBAAb,wBAA0Ce,KAC1C,qBAAKf,UAAU,kBAAf,SACKiB,EAAMpB,KAAI,SAAC6B,GAAD,OACP,cAAC,EAAD,CAEI/B,GAAI+B,EACJ9B,MAAOrB,EAAM6B,cAAgB,EAC7BF,QAASoB,GAHJI,WCrCdC,MATf,WACI,OACI,sBAAK3B,UAAU,MAAf,UACI,oBAAIA,UAAU,YAAd,yBACA,cAAC,EAAD,CAAMI,cAAe,SCFjCwB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.62037958.chunk.js","sourcesContent":["import '../styles/Card.css';\n\nfunction decodeNumber(number, maxNumber) {\n    const binDigits = maxNumber.toString(2).length;\n    return number.toString(2).padStart(binDigits, '0').split('');\n}\n\nfunction distributeToRows(elements) {\n    const rowSize = Math.sqrt(elements.length);\n    const rowsNumber = elements.length / rowSize;\n    const result = [];\n\n    for (let i = 0; i < rowsNumber; i++) {\n        result.push(elements.slice(i * rowsNumber, (i + 1) * rowsNumber));\n    }\n\n    return result;\n}\n\nexport default function Card(props) {\n    const handleClick = () => props.onClick(props.id);\n\n    const squareElements = decodeNumber(props.id, props.maxId).map((code, index) => (\n        <div\n            key={index}\n            className={'card-smol-square ' + (code === '1' ? 'card-smol-square-filled' : '')}\n        />\n    ));\n\n    const squareRows = distributeToRows(squareElements).map((squares, index) => (\n        <div key={index} className=\"card-square-row\">\n            {squares}\n        </div>\n    ));\n\n    return (\n        <div className=\"card-container\">\n            <button className=\"card\" onClick={handleClick}>\n                <div className=\"card-bg\">{squareRows}</div>\n            </button>\n        </div>\n    );\n}\n","import { useState } from 'react';\nimport _ from 'lodash';\nimport Card from './Card';\nimport '../styles/Game.css';\n\nfunction generateIds(numberOfCards) {\n    const maxId = Math.pow(2, Math.ceil(Math.log2(numberOfCards)));\n    return _.shuffle(_.range(0, maxId)).slice(0, numberOfCards);\n}\n\nexport default function Game(props) {\n    const [score, setScore] = useState(0);\n    const [highscore, setHighscore] = useState(0);\n    const [cards, setCards] = useState(generateIds(props.numberOfCards));\n    const [clickedCards, setClickedCards] = useState([]);\n\n    const restart = () => {\n        setScore(0);\n        setCards(generateIds(props.numberOfCards));\n    };\n\n    const handleCardClick = (id) => {\n        if (clickedCards.includes(id)) {\n            setHighscore(Math.max(score, highscore));\n            setScore(0);\n            setClickedCards([]);\n\n            // TODO: Lose\n            restart();\n        } else {\n            setClickedCards(clickedCards.concat(id));\n            setScore(score + 1);\n\n            if (clickedCards.length === cards.length) {\n                // TODO: Win\n                restart();\n            }\n        }\n\n        setCards(_.shuffle(cards));\n    };\n\n    return (\n        <div>\n            <p className=\"score-text\">Score: {score}</p>\n            <p className=\"highscore-text\">Highscore: {highscore}</p>\n            <div className=\"cards-container\">\n                {cards.map((cardID) => (\n                    <Card\n                        key={cardID}\n                        id={cardID}\n                        maxId={props.numberOfCards - 1}\n                        onClick={handleCardClick}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n}\n","import './styles/App.css';\nimport Game from './components/Game';\n\nfunction App() {\n    return (\n        <div className=\"app\">\n            <h1 className=\"app-title\">Memory Game</h1>\n            <Game numberOfCards={12} />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}